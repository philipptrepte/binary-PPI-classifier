ncol = 2, align = "hv", axis = "tlrb", labels = "AUTO"
)
library(viridis)
cowplot::plot_grid(
probGrid.plot(example_ppi_prediction, ylim = c(-0.1, 0.8)),
probDis.plot(example_ppi_prediction),
roc.plot(example_ppi_prediction),
recovery.plot(example_ppi_prediction),
ncol = 2, align = "hv", axis = "tlrb", labels = "AUTO"
)
learning.curve
?learning_curve
?learning.curve
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1")
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" & data == "mean_cBRET" |
interaction == "ARSA + DBN1" & data == "mean_cBRET" |
interaction == "BAD + BCL2L1" & data == "mean_mCit" |
interaction == "ARSA + DBN1" & data == "mean_mCit") %>%
dplyr::mutate(interaction = paste0(complex, ": ", interaction)) %>%
ggplot(aes(x = orientation, y = paste0(orientation, ": ", interaction), fill = score)) +
geom_tile()
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1")
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = paste0(orientation, ": ", interaction), fill = predDf))
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1")
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = paste0(orientation, ": ", interaction), fill = predMat)) +
geom_tile()
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile()
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_viridis() +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_viridis() +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_viridis(option = "A") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_viridis(option = "D") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_viridis(option = "C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_viridis(option = "D") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_viridis(option = "E") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
limits = c(0,1), na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = interaction, y = orientation, fill = predMat)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
limits = c(0,1), na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(fill = "probability")
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = interaction, fill = predMat)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
limits = c(0,1), na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(fill = "probability")
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = interaction, fill = predMat)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
limits = c(0,1), na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "right") +
labs(fill = "probability")
luthy_reference_sets %>%
filter(interaction == "BAD + BCL2L1" & data == "mean_cLuC" |
interaction == "ARSA + DBN1" & data == "mean_cLuC" |
interaction == "BAD + BCL2L1" & data == "mean_LumiOUT" |
interaction == "ARSA + DBN1" & data == "mean_LumiOUT") %>%
dplyr::mutate(interaction = paste0(complex, ": ", interaction)) %>%
ggplot(aes(x = orientation, y = score, fill = score)) +
geom_bar(stat = "identity", fill = "#6CA6C1") +
theme_pubr() +
facet_grid(data ~ interaction, scales = "free_y") +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(y = "LuTHy-LuC measurements", x = "tagging configuration")
luthy_reference_sets %>%
filter(interaction == "BAD + BCL2L1" & data == "mean_cBRET" |
interaction == "ARSA + DBN1" & data == "mean_cBRET" |
interaction == "BAD + BCL2L1" & data == "mean_mCit" |
interaction == "ARSA + DBN1" & data == "mean_mCit") %>%
dplyr::mutate(interaction = paste0(complex, ": ", interaction)) %>%
ggplot(aes(x = orientation, y = score, fill = score)) +
geom_bar(stat = "identity", fill = "#6CA6C1") +
theme_pubr() +
facet_grid(data ~ interaction, scales = "free_y") +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(y = "LuTHy-BRET measurements", x = "tagging configuration")
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = mean_cBRET, fill = predMat)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
limits = c(0,1), na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "right") +
labs(fill = "probability")
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = interaction, fill = mean_cBRET)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
limits = c(0,1), na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "right") +
labs(fill = "probability")
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = interaction, fill = mean_cBRET)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "right") +
labs(fill = "probability")
cowplot::plot_grid(
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = interaction, fill = predMat)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
limits = c(0,1), na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "right") +
labs(fill = "probability"),
example_ppi_prediction$predDf %>%
filter(interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1" |
interaction == "BAD + BCL2L1" |
interaction == "ARSA + DBN1") %>%
ggplot(aes(x = orientation, y = interaction, fill = mean_cBRET)) +
geom_tile() +
scale_fill_gradientn(colours = c("#FBF49C", "#ff6b6b", "#f7fff7", "#48C2C5"),
na.value = "#FBF49C") +
theme_pubr() +
ggplot2::theme(text = element_text(family = "Avenir"),
plot.title = element_text(size = 12),
plot.subtitle = element_text(size = 8),
axis.title = element_text(family = "Avenir Medium"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.position = "right") +
labs(fill = "mean cBRET"),
ncol = 1, labels = "AUTO"
)
ppi_prediction_result <- example_ppi_prediction
data <- ppi_prediction_result$predDf %>%
group_by(interaction, complex) %>%
summarise(prob = max(predMat))
data
data <- ppi_prediction_result$predDf %>%
group_by(interaction, complex) %>%
summarise(prob = max(predMat, na.rm = TRUE))
confusion_mat <- list()
confusion_df <- data.frame()
for(i in 1:3) {
j = c(0.5, 0.75, 0.95)[i]
confusion_mat[[i]] <- confusionMatrix(factor(ifelse(data$prob >= j, "PRS", "RRS")),
factor(data$complex))
confusion_df <- rbind(confusion_df, confusion_mat[[i]]$table %>%
cbind(probability = as.numeric(j)*100))
}
??confusionMatrix
for(i in 1:3) {
j = c(0.5, 0.75, 0.95)[i]
confusion_mat[[i]] <- caret::confusionMatrix(factor(ifelse(data$prob >= j, "PRS", "RRS")),
factor(data$complex))
confusion_df <- rbind(confusion_df, confusion_mat[[i]]$table %>%
cbind(probability = as.numeric(j)*100))
}
confusion_df
confusion_mat[[i]]
confusion_df
rownames(confusion_df)
#' Function to calculate a confusion matrix for
#'
#' @param ppi_prediction_result
#'
#' @return
#' @export
#'
#' @examples
confusion.matrix <- function(ppi_prediction_result) {
data <- ppi_prediction_result$predDf %>%
group_by(interaction, complex) %>%
summarise(prob = max(predMat, na.rm = TRUE))
confusion_mat <- list()
confusion_df <- data.frame()
for(i in 1:3) {
j = c(0.5, 0.75, 0.95)[i]
confusion_mat[[i]] <- caret::confusionMatrix(factor(ifelse(data$prob >= j, "PRS", "RRS")),
factor(data$complex))
confusion_df <- rbind(confusion_df, confusion_mat[[i]]$table %>%
cbind(probability = as.numeric(j)*100))
if(i == 3) {
rownames(confusion_df) <- c("PRS - 50%", "RRS - 50%", "PRS - 75%", "RRS - 75%", "PRS - 95%", "RRS - 95%")
}
}
}
confusion_df
#' Function to calculate a confusion matrix for
#'
#' @param ppi_prediction_result
#'
#' @return
#' @export
#'
#' @examples
confusion.matrix <- function(ppi_prediction_result) {
data <- ppi_prediction_result$predDf %>%
group_by(interaction, complex) %>%
summarise(prob = max(predMat, na.rm = TRUE))
confusion_mat <- list()
confusion_df <- data.frame()
for(i in 1:3) {
j = c(0.5, 0.75, 0.95)[i]
confusion_mat[[i]] <- caret::confusionMatrix(factor(ifelse(data$prob >= j, "PRS", "RRS")),
factor(data$complex))
confusion_df <- rbind(confusion_df, confusion_mat[[i]]$table %>%
cbind(probability = as.numeric(j)*100))
if(i == 3) {
rownames(confusion_df) <- c("PRS - 50%", "RRS - 50%", "PRS - 75%", "RRS - 75%", "PRS - 95%", "RRS - 95%")
}
}
return(confusion_df)
}
confusion.matrix(ppi_prediction_result)
names(confusion_mat)
View(confusion_mat)
}
#' Function to calculate a confusion matrix for
#'
#' @param ppi_prediction_result
#'
#' @return
#' @export
#'
#' @examples
confusion.matrix <- function(ppi_prediction_result) {
data <- ppi_prediction_result$predDf %>%
group_by(interaction, complex) %>%
summarise(prob = max(predMat, na.rm = TRUE))
confusion_mat <- list()
confusion_df <- data.frame()
for(i in 1:3) {
j = c(0.5, 0.75, 0.95)[i]
confusion_mat[[i]] <- caret::confusionMatrix(factor(ifelse(data$prob >= j, "PRS", "RRS")),
factor(data$complex))
confusion_df <- rbind(confusion_df, confusion_mat[[i]]$table %>%
cbind(probability = as.numeric(j)*100))
if(i == 3) {
names(confusion_mat) <- c("50%", "75%", "95%")
rownames(confusion_df) <- c("PRS: 50%", "RRS: 50%", "PRS: 75%", "RRS: 75%", "PRS: 95%", "RRS: 95%")
}
}
return(list(confusion_mat, confusion_df))
}
confusion_matrix <- confusion.matrix(example_ppi_prediction)
confusion_matrix
data <- ppi_prediction_result$predDf %>%
group_by(interaction, complex) %>%
summarise(prob = max(predMat, na.rm = TRUE))
confusion_mat <- list()
confusion_df <- data.frame()
for(i in 1:3) {
j = c(0.5, 0.75, 0.95)[i]
confusion_mat[[i]] <- caret::confusionMatrix(factor(ifelse(data$prob >= j, "PRS", "RRS")),
factor(data$complex))
confusion_df <- rbind(confusion_df, confusion_mat[[i]]$table %>%
cbind(probability = as.numeric(j)*100))
if(i == 3) {
names(confusion_mat) <- c("50%", "75%", "95%")
rownames(confusion_df) <- c("PRS: 50%", "RRS: 50%", "PRS: 75%", "RRS: 75%", "PRS: 95%", "RRS: 95%")
}
}
names(confusion_mat)
#' Function to calculate a confusion matrix for
#'
#' @param ppi_prediction_result
#'
#' @return
#' @export
#'
#' @examples
confusion.matrix <- function(ppi_prediction_result) {
data <- ppi_prediction_result$predDf %>%
group_by(interaction, complex) %>%
summarise(prob = max(predMat, na.rm = TRUE))
confusion_mat <- list()
confusion_df <- data.frame()
for(i in 1:3) {
j = c(0.5, 0.75, 0.95)[i]
confusion_mat[[i]] <- caret::confusionMatrix(factor(ifelse(data$prob >= j, "PRS", "RRS")),
factor(data$complex))
confusion_df <- rbind(confusion_df, confusion_mat[[i]]$table %>%
cbind(probability = as.numeric(j)*100))
if(i == 3) {
names(confusion_mat) <- c("50%", "75%", "95%")
rownames(confusion_df) <- c("PRS: 50%", "RRS: 50%", "PRS: 75%", "RRS: 75%", "PRS: 95%", "RRS: 95%")
}
}
return(list(confusionMatrixList = confusion_mat,
confusionMatrixDf = confusion_df))
}
confusion_matrix <- confusion.matrix(example_ppi_prediction)
confusion_matrix$confusionMatrixDf
confusion_matrix$confusionMatrixList$`95%`
??confusionMatrix
example_confusion_matrix <- confusion.matrix(example_ppi_prediction)
example_confusion_matrix$confusionMatrixDf
example_confusion_matrix$confusionMatrixDf
example_confusion_matrix$confusionMatrixList$`95%`
kable
knitr::kable(example_confusion_matrix$confusionMatrixDf, caption = "Tabulated confusion matrix.")
knitr::kable(example_confusion_matrix$confusionMatrixList$`95%`)
devtools::unload("binaryPPIclassifier")
devtools::install_github("philipptrepte/binary-PPI-classifier")
devtools::build_vignettes()
vignette
vignette()
vignette(package = "DEP")
vignette("DEP", package = "DEP")
